img.df = data.frame(am_img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$am_img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
ximg.df = img.df
######################
# Getting natalie's scans
######################
niis = sapply(ids, function(x) {
iddir = file.path(nat_dir, x)
x = list.files(path=  iddir, pattern=".nii.gz",
recursive = FALSE, full.names = TRUE)
})
keep.ids = ids[sapply(niis, length) > 0]
imgs = unlist(niis)
img.df = data.frame(nat_img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$nat_img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
all.df = merge(ximg.df, img.df, by="id", all=TRUE)
sdir = file.path(rootdir, "Final_Brain_Seg", "Original_Images")
imgs = list.files(sdir, pattern = "\\.nii\\.gz", recursive=TRUE,
full.names=TRUE)
imgs = imgs[ !grepl("dcm2nii", imgs)]
imgs = imgs[ !grepl("Skull_Stripped", imgs)]
img.df = data.frame(img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
head(img.df)
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(extrantsr)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
options(fsl.path='/usr/local/fsl')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/Dropbox/CTR/DHanley/CT_Registration")
am_dir <- file.path(rootdir, "Final_Brain_Seg", "AM_ROI_images")
nat_dir <- file.path(rootdir, "Final_Brain_Seg", "ROI_images")
ids = list.dirs(nat_dir, recursive=FALSE, full.names=FALSE)
ids = basename(ids)
ids = grep("\\d\\d\\d-(\\d|)\\d\\d\\d", ids, value=TRUE)
length(ids)
am_iddirs = file.path(am_dir, ids)
nat_iddirs = file.path(nat_dir, ids)
iid = 1
######################
# Getting Andrew's scans
######################
niis = sapply(ids, function(x) {
iddir = file.path(am_dir, x)
x = list.files(path=  iddir, pattern=".nii.gz",
recursive = FALSE, full.names = TRUE)
})
keep.ids = ids[sapply(niis, length) > 0]
imgs = unlist(niis)
img.df = data.frame(am_img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$am_img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
ximg.df = img.df
######################
# Getting natalie's scans
######################
niis = sapply(ids, function(x) {
iddir = file.path(nat_dir, x)
x = list.files(path=  iddir, pattern=".nii.gz",
recursive = FALSE, full.names = TRUE)
})
keep.ids = ids[sapply(niis, length) > 0]
imgs = unlist(niis)
img.df = data.frame(nat_img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$nat_img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
all.df = merge(ximg.df, img.df, by="id", all=TRUE)
sdir = file.path(rootdir, "Final_Brain_Seg", "Original_Images")
imgs = list.files(sdir, pattern = "\\.nii\\.gz", recursive=TRUE,
full.names=TRUE)
imgs = imgs[ !grepl("dcm2nii", imgs)]
imgs = imgs[ !grepl("Skull_Stripped", imgs)]
img.df = data.frame(img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
img.df = merge(all.df, img.df, by="id", all=TRUE)
cc = complete.cases(img.df)
##########
# Make sure all andrew's are in there
#########
stopifnot(sum(cc) == nrow(ximg.df))
img.df = img.df[cc,]
splitdf = split(img.df, img.df$nat_img)
iimg = 1
dd = splitdf[[iimg]]
rimg = dd$nat_img[1]
roi = readNIfTI(rimg, reorient=FALSE)
roi = roi > 0
hdr = dd$hdr[1]
load(hdr)
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(extrantsr)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
options(fsl.path='/usr/local/fsl')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/Dropbox/CTR/DHanley/CT_Registration")
am_dir <- file.path(rootdir, "Final_Brain_Seg", "AM_ROI_images")
nat_dir <- file.path(rootdir, "Final_Brain_Seg", "ROI_images")
ids = list.dirs(nat_dir, recursive=FALSE, full.names=FALSE)
ids = basename(ids)
ids = grep("\\d\\d\\d-(\\d|)\\d\\d\\d", ids, value=TRUE)
length(ids)
am_iddirs = file.path(am_dir, ids)
nat_iddirs = file.path(nat_dir, ids)
iid = 1
######################
# Getting Andrew's scans
######################
niis = sapply(ids, function(x) {
iddir = file.path(am_dir, x)
x = list.files(path=  iddir, pattern=".nii.gz",
recursive = FALSE, full.names = TRUE)
})
keep.ids = ids[sapply(niis, length) > 0]
imgs = unlist(niis)
img.df = data.frame(am_img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$am_img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
ximg.df = img.df
######################
# Getting natalie's scans
######################
niis = sapply(ids, function(x) {
iddir = file.path(nat_dir, x)
x = list.files(path=  iddir, pattern=".nii.gz",
recursive = FALSE, full.names = TRUE)
})
keep.ids = ids[sapply(niis, length) > 0]
imgs = unlist(niis)
img.df = data.frame(nat_img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$nat_img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
all.df = merge(ximg.df, img.df, by="id", all=TRUE)
sdir = file.path(rootdir, "Final_Brain_Seg", "Original_Images")
imgs = list.files(sdir, pattern = "\\.nii\\.gz", recursive=TRUE,
full.names=TRUE)
imgs = imgs[ !grepl("dcm2nii", imgs)]
imgs = imgs[ !grepl("Skull_Stripped", imgs)]
img.df = data.frame(img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
img.df = merge(all.df, img.df, by="id", all=TRUE)
cc = complete.cases(img.df)
##########
# Make sure all andrew's are in there
#########
stopifnot(sum(cc) == nrow(ximg.df))
df = img.df[cc,]
df$hdr = file.path(dirname(df$img), "Sorted",
paste0(nii.stub(df$img, bn=TRUE), "_Header_Info.Rda"))
df$pid = sapply(strsplit(df$id, "_"), `[`, 1)
######################
# Keeping only one scan per person
######################
df = ddply(df, .(pid), function(x){
x = x[ x$id == x$id[1], ]
x
})
n.pid = length(unique(df$pid))
n.img = length(unique(df$id))
stopifnot(n.pid == n.img)
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(extrantsr)
library(plyr)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
options(fsl.path='/usr/local/fsl')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/Dropbox/CTR/DHanley/CT_Registration")
am_dir <- file.path(rootdir, "Final_Brain_Seg", "AM_ROI_images")
nat_dir <- file.path(rootdir, "Final_Brain_Seg", "ROI_images")
ids = list.dirs(nat_dir, recursive=FALSE, full.names=FALSE)
ids = basename(ids)
ids = grep("\\d\\d\\d-(\\d|)\\d\\d\\d", ids, value=TRUE)
length(ids)
am_iddirs = file.path(am_dir, ids)
nat_iddirs = file.path(nat_dir, ids)
iid = 1
######################
# Getting Andrew's scans
######################
niis = sapply(ids, function(x) {
iddir = file.path(am_dir, x)
x = list.files(path=  iddir, pattern=".nii.gz",
recursive = FALSE, full.names = TRUE)
})
keep.ids = ids[sapply(niis, length) > 0]
imgs = unlist(niis)
img.df = data.frame(am_img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$am_img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
ximg.df = img.df
######################
# Getting natalie's scans
######################
niis = sapply(ids, function(x) {
iddir = file.path(nat_dir, x)
x = list.files(path=  iddir, pattern=".nii.gz",
recursive = FALSE, full.names = TRUE)
})
keep.ids = ids[sapply(niis, length) > 0]
imgs = unlist(niis)
img.df = data.frame(nat_img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$nat_img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
all.df = merge(ximg.df, img.df, by="id", all=TRUE)
sdir = file.path(rootdir, "Final_Brain_Seg", "Original_Images")
imgs = list.files(sdir, pattern = "\\.nii\\.gz", recursive=TRUE,
full.names=TRUE)
imgs = imgs[ !grepl("dcm2nii", imgs)]
imgs = imgs[ !grepl("Skull_Stripped", imgs)]
img.df = data.frame(img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
img.df = merge(all.df, img.df, by="id", all=TRUE)
cc = complete.cases(img.df)
##########
# Make sure all andrew's are in there
#########
stopifnot(sum(cc) == nrow(ximg.df))
df = img.df[cc,]
df$hdr = file.path(dirname(df$img), "Sorted",
paste0(nii.stub(df$img, bn=TRUE), "_Header_Info.Rda"))
df$pid = sapply(strsplit(df$id, "_"), `[`, 1)
######################
# Keeping only one scan per person
######################
df = ddply(df, .(pid), function(x){
x = x[ x$id == x$id[1], ]
x
})
n.pid = length(unique(df$pid))
n.img = length(unique(df$id))
stopifnot(n.pid == n.img)
splitdf = split(df, df$nat_img)
iimg = 1
source('~/.active-rstudio-document')
dd = splitdf[[iimg]]
rimg = dd$nat_img[1]
roi = readNIfTI(rimg, reorient=FALSE)
roi = roi > 0
hdr = dd$hdr[1]
load(hdr)
vol.roi = get_roi_vol(img = roi, dcmtables = dcmtables)
varslice = vol.roi$varslice
vol.roi = vol.roi$truevol
x = dd$am_img[1]
x
ss = readNIfTI(x, reorient=FALSE)
ss = ss > 0
truevol = get_roi_vol(img = ss, dcmtables = dcmtables)$truevol
dman = c(roi)
dauto = c(ss)
dim.dman = dim(roi)
dim.dauto = dim(ss)
res = extrantsr:::sim(dman, dauto, dim.dman, dim.dauto)
res$estvol = truevol
ss.imgs = list.files(sdir, pattern = "\\.nii\\.gz", recursive=TRUE,
full.names=TRUE)
ss.imgs = ss.imgs[ grepl("Skull_Stripped", ss.imgs)]
ss.imgs = ss.imgs[ grepl("[M|m]ask", ss.imgs)]
ss.df = data.frame(ssimg=ss.imgs, stringsAsFactors=FALSE)
ss = strsplit(ss.df$ssimg, "_SS")
ss = sapply(ss, `[`, 1)
dn = dirname(dirname(ss))
bn = basename(ss)
ss = file.path(dn, paste0(bn, ".nii.gz"))
ss.df$img = ss
ss.df
hed(ss.df)
head(ss.df)
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(extrantsr)
library(plyr)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
options(fsl.path='/usr/local/fsl')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/Dropbox/CTR/DHanley/CT_Registration")
am_dir <- file.path(rootdir, "Final_Brain_Seg", "AM_ROI_images")
nat_dir <- file.path(rootdir, "Final_Brain_Seg", "ROI_images")
ids = list.dirs(nat_dir, recursive=FALSE, full.names=FALSE)
ids = basename(ids)
ids = grep("\\d\\d\\d-(\\d|)\\d\\d\\d", ids, value=TRUE)
length(ids)
am_iddirs = file.path(am_dir, ids)
nat_iddirs = file.path(nat_dir, ids)
iid = 1
######################
# Getting Andrew's scans
######################
niis = sapply(ids, function(x) {
iddir = file.path(am_dir, x)
x = list.files(path=  iddir, pattern=".nii.gz",
recursive = FALSE, full.names = TRUE)
})
keep.ids = ids[sapply(niis, length) > 0]
imgs = unlist(niis)
img.df = data.frame(am_img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$am_img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
ximg.df = img.df
######################
# Getting natalie's scans
######################
niis = sapply(ids, function(x) {
iddir = file.path(nat_dir, x)
x = list.files(path=  iddir, pattern=".nii.gz",
recursive = FALSE, full.names = TRUE)
})
keep.ids = ids[sapply(niis, length) > 0]
imgs = unlist(niis)
img.df = data.frame(nat_img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$nat_img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
all.df = merge(ximg.df, img.df, by="id", all=TRUE)
sdir = file.path(rootdir, "Final_Brain_Seg", "Original_Images")
imgs = list.files(sdir, pattern = "\\.nii\\.gz", recursive=TRUE,
full.names=TRUE)
imgs = imgs[ !grepl("dcm2nii", imgs)]
imgs = imgs[ !grepl("Skull_Stripped", imgs)]
img.df = data.frame(img=imgs, stringsAsFactors=FALSE)
img.df$id = basename(img.df$img)
ss = strsplit(img.df$id, "_")
img.df$id = sapply(ss, function(x) {
paste(x[1:4], collapse="_", sep="")
})
img.df = merge(all.df, img.df, by="id", all=TRUE)
cc = complete.cases(img.df)
##########
# Make sure all andrew's are in there
#########
stopifnot(sum(cc) == nrow(ximg.df))
df = img.df[cc,]
df$hdr = file.path(dirname(df$img), "Sorted",
paste0(nii.stub(df$img, bn=TRUE), "_Header_Info.Rda"))
df$pid = sapply(strsplit(df$id, "_"), `[`, 1)
######################
# Keeping only one scan per person
######################
df = ddply(df, .(pid), function(x){
x = x[ x$id == x$id[1], ]
x
})
n.pid = length(unique(df$pid))
n.img = length(unique(df$id))
stopifnot(n.pid == n.img)
splitdf = split(df, df$nat_img)
iimg = 1
dd = splitdf[[iimg]]
rimg = dd$nat_img[1]
roi = readNIfTI(rimg, reorient=FALSE)
roi = roi > 0
hdr = dd$hdr[1]
load(hdr)
vol.roi = get_roi_vol(img = roi, dcmtables = dcmtables)
varslice = vol.roi$varslice
vol.roi = vol.roi$truevol
results = laply(dd$am_img, function(x){
ss = readNIfTI(x, reorient=FALSE)
ss = ss > 0
truevol = get_roi_vol(img = ss, dcmtables = dcmtables)$truevol
dman = c(roi)
dauto = c(ss)
dim.dman = dim(roi)
dim.dauto = dim(ss)
res = extrantsr:::sim(dman, dauto, dim.dman, dim.dauto)
res$am_vol = truevol
return(res)
}, .progress = "text")
dd = cbind(dd, results)
dd$nat_vol = vol.roi
dd
splitdf[[iimg]] = dd
print(iimg)
dd
source('~/Dropbox/CTR/DHanley/CT_Registration/Final_Brain_Seg/programs/Merge_ROI_data.R')
rm(list=ls())
library(ggplot2)
library(reshape2)
library(tidyr)
library(dplyr)
library(plyr)
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/Dropbox/CTR/DHanley/CT_Registration")
basedir = file.path(rootdir, "Final_Brain_Seg")
am_dir <- file.path(basedir, "AM_ROI_images")
nat_dir <- file.path(basedir, "ROI_images")
resdir = file.path(basedir, "results")
load(file=file.path(resdir, "AM_NU_Overlap_Statistics.Rda"))
ddf$avg = (ddf$am_vol + ddf$nat_vol)/2
ddf$diff = (ddf$am_vol - ddf$nat_vol)
ddf$ratio = ddf$am_vol / ddf$nat_vol
qplot(y=diff, x=avg, data=ddf, geom=c("point", "smooth"), se=FALSE)
qplot(y=am_vol, x=nat_vol, data=ddf, geom=c("point", "smooth"),
se=FALSE) + geom_abline(aes(intercept=0, slope = 1))
long = ddf %>%
select(id, dice, sens, spec, accur, ratio) %>%
gather(key=measure, value=value, dice,
sens, spec, accur, ratio)
p = qplot(y=value, x=measure, data=long, geom=c("boxplot"))
print(p)
print({p + ylim(c(0, 1))})
ddf$ratio
print({p + ylim(c(0, 1.01))})
long$measure = revalue(long$measure,
c(dice = "Dice Similiarity Index",
sens = "Sensitivity",
spec = "Specificity",
accur = "Accuracy",
ratio = "Ratio of Volumes"))
p = ggplot(aes(y=value, x=measure), data=long) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitter(w = 0.1, h = 0)) + xlab("")
p
p + ylim(c(0.95, 1))
p + ylim(c(0, 1))
mean(ddf$diff)
hist(ddf$diff)
qplot(y=diff, x=avg, data=ddf, geom=c("point", "smooth"), se=FALSE)
qplot(y=am_vol, x=nat_vol, data=ddf, geom=c("point", "smooth"),
se=FALSE) + geom_abline(aes(intercept=0, slope = 1))
cor(ddf$am_vol, ddf$nat_img)
cor(ddf$am_vol, ddf$nat_vol)
cor.test(ddf$am_vol, ddf$nat_vol)
long
aggregate(value ~ measure, data=long, mean)
aggregate(value ~ measure, data=long, mean, sd)
aggregate(value ~ measure, data=long, list(mean, sd))
ddply(data=long, .(measure), summarise,
mean=mean(value),
sd=sd(value),
median=median(value)
)
ddply(long, .(measure), summarise,
mean=mean(value),
sd=sd(value),
median=median(value)
)
t.test(long$value)
t.test(long$value)$conf.int
ests = ddply(long, .(measure), summarise,
mean=mean(value),
lower = t.test(value)$conf.int[1],
upper = t.test(value)$conf.int[2],
sd=sd(value),
median=median(value)
)
ests
